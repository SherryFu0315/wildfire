path /users {
    read() { true }
    // `.isAdmin` is not writable by any users including admin user.
    index() { ['email'] }

    /{uid} {
        write() { (isCreate(this) || isCurrentUser(uid) || isAdmin()) && (this.isAdmin == null && prior(this).isAdmin == null) }
    }
}

path /comments {
    read() { true }
    index() { ['rootCommentId', 'pageURL'] }

    /{commentId} {
        write() { isCreate(this) || (isDelete(this) && canDeleteComment(this)) || isAdmin() }
    }
}

path /pages {
    read() { true }
    write() { true }
}

path /commentReplies {
    read() { true }
    write() { true }
}

path /votes {
    read() { true }
    write() { true }
    // /{commentId} {
    //     write() {prior(root).}
    // }
    // /{commentId}/{type}/{uid} {
    //     write() { isCurrentUser(uid) || isAdmin() }
    // }

    // Notes:
    //  Ideally, except for admin users,
    //      (1) votes data should only be created by the voting user,
    //      (2) votes data should not be updated by any user,
    //      (3) votes data should only be removed by 
    //          i. it's voter, or 
    //          ii. comment author, or 
    //          iii. root comment author
    //  I'm not declaring these rules at the moment because the votes data
    //  is not that important to have such complex rules. 
    //  Might reconsider this issue in the future though.
}

path /notifications {
    index() { ['uid'] }

    /{notifId} {
        read() { prior(this).uid == auth.uid }
        write() { isCreate(this) || isCurrentUser(prior(this).uid) || isAdmin() }
    }
}

path /reported {
    read() { isAdmin() }

    /{commentId}/{uid} {
        write() { (isCurrentUser(uid) && isCreate(this)) || isAdmin() }
    }
}

path /ban {
    read() { true }
    write() { isAdmin() }
}

path /plugins/{pluginName}/{codeNumber}/{nodeName} {
    read() { isFromUserGroup(this, floor(parseInt(codeNumber) / 8)) || isAdmin() }
    write() { canWritePluginData(this, floor(parseInt(codeNumber) / 8), parseInt(codeNumber) % 8) || isAdmin() }
}

function isCurrentUser (uid) { auth != null && auth.uid == uid }
function isAdmin () { prior(root).users[auth.uid].isAdmin == true }

function isCreate (this) { prior(this) == null }
function isDelete (this) { this == null }
function isUpdate (this) { this != prior(this) && !isCreate(this) && !isDelete(this) }

function canDeleteComment (this) { isCommentAuthor(this) || isRootCommentAuthor(this) }
function isCommentAuthor (this) { prior(this).uid == auth.uid }
function isRootCommentAuthor (this) { prior(this).rootCommentUid == auth.uid }

function isSignedInUser () { auth != null }
function isOwner (this) { isSignedInUser() && (prior(this).owner == auth.uid || (isCreate(this) && this.owner == auth.uid)) }
function isRelatedUser (this) { 
    isSignedInUser() && (prior(this).relatedUsers[auth.uid] != null || isOwner(this))
}
// c: create, u: update, d: delete
function xxx () { false }
function xxd (this) { isDelete(this) }
function xux (this) { isUpdate(this) }
function xud (this) { isUpdate(this) || isDelete(this) }
function cxx (this) { isCreate(this) }
function cxd (this) { isCreate(this) || isDelete(this) }
function cux (this) { isCreate(this) || isUpdate(this) }
function cud () { true }

function isFromUserGroup (this, userGroup) {
    userGroup == 0 ? true 
    : userGroup == 1 ? isSignedInUser()
    : userGroup == 2 ? isRelatedUser(this)
    : isOwner(this) // userGroup == 3
}

function canWritePluginData (this, userGroup, writeCodeNumber) {
    isFromUserGroup(this, userGroup) && (
        writeCodeNumber == 0 ? xxx()
        : writeCodeNumber == 1 ? xxd(this) 
        : writeCodeNumber == 2 ? xux(this) 
        : writeCodeNumber == 3 ? xud(this) 
        : writeCodeNumber == 4 ? cxx(this) 
        : writeCodeNumber == 5 ? cxd(this) 
        : writeCodeNumber == 6 ? cux(this)
        : cud() // writeCodeNumber == 7
    )
}

function floor (n) {
    n < 1 ? 0 :
    n < 2 ? 1 :
    n < 3 ? 2 :
    3 // n < 4
}

function parseInt (s) {
    s == '0' ?
    0 : s == '1' ?
    1 : s == '2' ?
    2 : s == '3' ?
    3 : s == '4' ?
    4 : s == '5' ?
    5 : s == '6' ?
    6 : s == '7' ?
    7 : s == '8' ?
    8 : s == '9' ?
    9 : s == '10' ?
    10 : s == '11' ?
    11 : s == '12' ?
    12 : s == '13' ?
    13 : s == '14' ?
    14 : s == '15' ?
    15 : s == '16' ?
    16 : s == '17' ?
    17 : s == '18' ?
    18 : s == '19' ?
    19 : s == '20' ?
    20 : s == '21' ?
    21 : s == '22' ?
    22 : s == '23' ?
    23 : s == '24' ?
    24 : s == '25' ?
    25 : s == '26' ?
    26 : s == '27' ?
    27 : s == '28' ?
    28 : s == '29' ?
    29 : s == '30' ?
    30 : 
    31 // s == '32'
}